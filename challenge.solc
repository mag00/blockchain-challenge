contract CryptoHill {
    
  address admin;
  address leader;
  bytes32 leaderHash;
  bytes32 difficulty;
  uint8 fallenLeaders;
  uint startingTime;
  string leaderMessage;
  string defaultLeaderMessage;
  
  
  event Begin(string log);
  event NewLeader(string log, address newLeader, bytes32 newHash);
  event Message(string log);
  event GameOver(string log);
  event Winner (string log, address winner);
    
  function CryptoHill(){ 
    admin = msg.sender;

    //Starting Time
    startingTime = block.timestamp;

    //Initial seed for the first challenge. https://en.wikipedia.org/wiki/AACS_encryption_key_controversy
    leaderHash = sha256("09F911029D74E35BD84156C5635688C0");

    //First leader is the creator of the contract
    leader = msg.sender;

    //The placeholder leader message
    defaultLeaderMessage = "If you're this weeks leader, you own this field. Write a message here.";
    leaderMessage = defaultLeaderMessage;
    //Difficulty starts very easy
    //difficulty = 1;
    difficulty = leaderHash;
    fallenLeaders = 0;

    Begin("Overthrow the leader by colliding hashes with the leader. Leader can talk trash in the MOTD and wins at the end of the week.");

  }
  
  function reset() private{
      
      leaderHash = sha256(block.timestamp);
      leaderMessage = defaultLeaderMessage;
      difficulty = leaderHash;
      leader = admin;
      fallenLeaders = 0;
  }
  
  function checkDate() private returns (bool success) {
      
      //Are we one week beyond the last game? TODO change time for mainnet
      //if (block.timestamp > (startingTime + 1 weeks)) {
      if (block.timestamp > (startingTime + 5 minutes)) {
          
          //If so, log winner, start the clock over again and reset.
          Winner("We have a new winner!", leader);
          
          //"pay the man" https://www.youtube.com/watch?v=QqitTNF_I3g
          leader.send(this.balance);
          
          startingTime = block.timestamp;
          reset();
          return true;
      }
      return false;
    
  }

  function overthrow(string challengeData) returns (bool success){
      
      
        //Keeping mist UI clean - adding admin messages here
        if(msg.sender == admin){
          Message(challengeData);
        }
        
        //Submission too late
        if(checkDate()){
            return false;
        }
        
        //Create hash from data sent to contract
        var challengeHash = sha256(challengeData);
        
        //Cheating - of course last hash will collide
        if(challengeHash == leaderHash)
            return false;
        
        //Loop runs as long as collisions happen
        //for(uint i = 0; i < difficulty; i++) {
        //    if(challengeHash[i] != leaderHash[i]) {
        //        return leaderHash;
        //    }
        //}

        //Other Method: Constantly "reducing" difficulty
        if((challengeHash ^ leaderHash) > difficulty) {
          return false;
        }

        //If they survived the checks, they met the difficulty level. Do "winning" things:
        difficulty = (challengeHash ^ leaderHash);
        leader = msg.sender;
        leaderHash = challengeHash;
        NewLeader("New leader! This is their address, and the new hash to collide.", leader, leaderHash);
        fallenLeaders++;
        
        return true;
  }
  
  function changeLeaderMessage(string newMessage){
      if(msg.sender == leader)
        leaderMessage = newMessage;
  }
  
  //These functions announce the state of things in mist
  function currentLeader() constant returns (address CurrentLeaderAddress){
      return leader;
  }
  
  function Difficulty() constant returns (bytes32 XorMustBeLessThan){
      return difficulty;
  }
  function LeaderHash() constant returns (bytes32 leadingHash){
      return leaderHash;
  }
  
  function LeaderMessage() constant returns (string MessageOfTheDay){
      return leaderMessage;
  }
  function FallenLeaders() constant returns (uint8 Victors){
      return fallenLeaders;
  }

  //TODO remove this before main net
  function kill(){
      if (msg.sender == admin){
        GameOver("The Crypto Hill has ended.");
        selfdestruct(admin);
      }
  }
}
