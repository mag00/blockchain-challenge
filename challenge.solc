contract CryptoHill {
    
  address owner;
  address leader;
  bytes32 leaderHash;
  bytes32 difficulty;
  uint8 fallenLeaders;
  string leaderMessage;
  
  event Begin(string log);
  event NewLeader(string log, address newLeader);
  event Message(string log);
  event GameOver(string log);
    
  function CryptoHill(){ 
    owner = msg.sender;

    //Initial seed for the first challenge. https://en.wikipedia.org/wiki/AACS_encryption_key_controversy
    leaderHash = sha256("09F911029D74E35BD84156C5635688C0");

    //First leader is the creator of the contract
    leader = msg.sender;

    //The placeholder leader message
    leaderMessage = "If you have beaten this difficulty, you own this field. Write a message here.";

    //Difficulty starts very easy
    //difficulty = 1;
    difficulty = leaderHash;
    fallenLeaders = 0;

    Begin("Overthrow the leader by colliding significant bits than the current leader. Any bounty in contract balance given to new leader, and can change the message.");
    
  }
  
  function overthrow(string challengeData) returns (bytes32 overthrownBytes){
        //Create hash from data sent to contract
        var challengeHash = sha256(challengeData);
        
        //Cheating - of course last hash will collide
        if(challengeHash == leaderHash)
            return leaderHash;
        
        //Loop runs as long as collisions happen
        //for(uint i = 0; i < difficulty; i++) {
        //    if(challengeHash[i] != leaderHash[i]) {
        //        return leaderHash;
        //    }
        //}

        //Other Method: Constantly "reducing" difficulty
        if((challengeHash ^ leaderHash) > difficulty) {
          return leaderHash;
        }

        //If they survived the checks, they met the difficulty level. Do "winning" things:
        difficulty = (challengeHash ^ leaderHash);
        leader = msg.sender;
        leaderHash = challengeHash;
        NewLeader("New leader!", leader);
        fallenLeaders++;
        //"pay the man" https://www.youtube.com/watch?v=QqitTNF_I3g
        leader.send(this.balance);

        return challengeHash;
  }
  
  function changeLeaderMessage(string newMessage){
      if(msg.sender == leader)
        leaderMessage = newMessage;
  }
  
  
  //These functions announce the state of things in mist
  function currentLeader() constant returns (address CurrentLeaderAddress){
      return leader;
  }
  function Difficulty() constant returns (uint32 RemainingCollisionBits){
      return uint32(difficulty);
  }
  function LeaderHash() constant returns (bytes32 leadingHash){
      return leaderHash;
  }
  function LeaderMessage() constant returns (string LeaderMessage){
      return leaderMessage;
  }
  function FallenLeaders() constant returns (uint8 Victors){
      return fallenLeaders;
  }
  
  function adminAnnouncement(string adminMessage) {
      if(msg.sender == owner){
          Message(adminMessage);
      }
  }

  //Will remove this before main net
  function kill(){
      if (msg.sender == owner){
        GameOver("The Crypto Hill has ended.");
        selfdestruct(owner);
      }
  }
}
